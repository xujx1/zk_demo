master选举
zkClient: http://www.cnblogs.com/nevermorewang/p/5611807.html
curator:http://blog.csdn.net/dc_726/article/details/46475633


选主原理介绍：zookeeper的节点有两种类型，持久节点跟临时节点。
临时节点有个特性，就是如果注册这个节点的机器失去连接(通常是宕机)，那么这个节点会被zookeeper删除。
选主过程就是利用这个特性，在服务器启动的时候，去zookeeper特定的一个目录下注册一个临时节点(这个节点作为master，谁注册了这个节点谁就是master)，
注册的时候，如果发现该节点已经存在，则说明已经有别的服务器注册了(也就是有别的服务器已经抢主成功)，那么当前服务器只能放弃抢主，作为从机存在。
同时，抢主失败的当前服务器需要订阅该临时节点的删除事件，以便该节点删除时(也就是注册该节点的服务器宕机了或者网络断了之类的)进行再次抢主操作。
从机具体需要去哪里注册服务器列表的临时节点，节点保存什么信息，根据具体的业务不同自行约定。
选主的过程，其实就是简单的争抢在zookeeper注册临时节点的操作，谁注册了约定的临时节点，谁就是master。


这个抢主延时有点问题：假如master在宕机了，首先当前所有的服务器都会通知到master节点的删除，如果当前是master网络波动，master任然有可能抢先注册master节点，但是现在子服务器在5s后任然会尝试抢主。
现在就出现问题了：假如子服务器在5s后进行抢主的时候，master再出现一次网络波动，这时候就有可能导致子服务器有可能导致抢先获取/master节点，并且这次抢主的产生原因可能是因为上次的网络波动产生的，然后就会引发不必要的网络波动了。
我想的解决方案是加上一个版本号：通过比较master宕机的次数，跟子服务器尝试的次数进行cas，用来判断是否是当前master宕机引发的主节点的争夺

例子：假如有a,b,c,d,e五个节点，这个时候假设a是master，
但是a第一次网络波动，b,c,d,e延时5s开始第一次抢主，但是a在3s的时候恢复了网络，
然后a就有抢到了主，但是a抢到主后1s，产生了第二次网络波动。
这个时候正好b,c,d,e开始因为a第一次网络波动产生的延时抢主，然后b抢成功了。
然后1s后，a恢复了，这时候就需要很多多余的同步了。